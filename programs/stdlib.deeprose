(def true 1)
(def false '())
(def otherwise true)

(def dec (\ (n) (- n 1)))
(def inc (\ (n) (+ 1 n)))

(def nil? (\ (xs) (= nil xs)))

(def range (\ (start end)
    (if (= start end)
        (list start)
        (cons start 
              (range (inc start) end)))))

(def map (\ (f xs)
    (if (= nil xs)
        nil
        (cons (f (first xs))
              (map f (rest xs))))))

(def filter (\ (pred? xs)
    (cond (nil? xs) nil
          (pred? (first xs)) (cons (first xs)
                                   (filter pred? (rest xs)))
          otherwise (filter pred? (rest xs)))))

(def fold (\ (f accum xs)
    (if (nil? xs)
        accum
        (f (first xs) (fold f accum (rest xs))))))

(def zip-with (\ (f xs ys)
    (if (or (nil? xs) (nil? ys))
        nil
        (cons (f (first xs) (first xs)) 
              (zip-with f (rest xs) (rest xs))))))

(def zip (\ (xs ys)
    (zip-with list xs ys)))

(def even? (\ (n) (= (mod n 2) 0)))
(def odd? (\ (n) (not (even? n))))

(def sum (\ (xs) (fold + 0 xs)))

(def <= (\ (a b)
    (or (< a b)
        (= a b))))
(def >= (\ (a b)
    (or (> a b)
        (= a b))))

(def len (\ (xs)
    (if (nil? xs)
      0
      (+ 1 (len (rest xs))))))

(def elem? (\ (a xs)
    (fold (\ (x accum) (or accum (= a x))) false xs)))

(def take (\ (n xs)
    (if (= n 0)
        nil
        (cons (first xs) (take (dec n) (rest xs))))))

(def drop (\ (n xs)
    (if (= n 0)
        xs
        (drop (dec n) (rest xs)))))

(def nth (\ (n xs)
    (if (= n 1)
        (first xs)
        (nth (dec n) (rest xs)))))

(def ^ (\ (base n)
    (if (= n 0)
        1
        (* base (^ base (dec n))))))

(def max (\ (x & xs)
    (let (max^ (\ (a b)
                 (if (> a b) a b)))
      (fold max^ x xs))))

(def min (\ (x & xs)
    (let (min^ (\ (a b)
                 (if (< a b) a b)))
      (fold min^ x xs))))

(def concat (\ (& xs)
    (let (concat^ (\ (xs ys)
                    (if (nil? xs) 
                        ys
                        (cons (first xs) (concat^ (rest xs) ys)))))
      (fold concat^ nil xs))))

(def apply (\ (f xs)
    (eval (cons f xs))))

(def compose (\ (& fs)
    (\ (x)
      (fold (\ (f x) (f x)) x fs))))
