; the deeprose standard library
; Automatically ran at deeprose startup, meaning
; any deeprose program may use any of these functions

(def true 1)
(def false '())
(def otherwise true)

(def dec (\ (n) (- n 1)))
(def inc (\ (n) (+ 1 n)))

(def nil? (\ (xs) (= nil xs)))

(def range (\ (start end)
    (if (= start end)
        (list start)
        (cons start 
              (range (inc start) end)))))

(def map (\ (f xs)
    (if (= nil xs)
        nil
        (cons (f (first xs))
              (map f (rest xs))))))

(def filter (\ (pred? xs)
    (cond (nil? xs) nil
          (pred? (first xs)) (cons (first xs)
                                   (filter pred? (rest xs)))
          otherwise (filter pred? (rest xs)))))

(def foldr (\ (f accum xs)
    (if (nil? xs)
        accum
        (f (first xs) (foldr f accum (rest xs))))))

(def foldl (\ (f accum xs)
    (if (nil? xs)
        accum 
        (foldl f (f (first xs) accum) (rest xs)))))

(def zip-with (\ (f xs ys)
    (if (or (nil? xs) (nil? ys))
        nil
        (cons (f (first xs) (first ys)) 
              (zip-with f (rest xs) (rest ys))))))

(def zip (\ (xs ys)
    (zip-with list xs ys)))

(def even? (\ (n) (= (mod n 2) 0)))
(def odd? (\ (n) (not (even? n))))

(def sum (\ (xs) (apply + xs)))
(def product (\ (xs) (apply * xs)))

(def <= (\ (a b)
    (or (< a b)
        (= a b))))
(def >= (\ (a b)
    (or (> a b)
        (= a b))))

(def len (\ (xs)
    (if (nil? xs)
      0
      (+ 1 (len (rest xs))))))

(def elem? (\ (a xs)
    (foldr (\ (x accum) (or accum (= a x))) false xs)))

(def take (\ (n xs)
    (if (= n 0)
        nil
        (cons (first xs) (take (dec n) (rest xs))))))

(def drop (\ (n xs)
    (if (= n 0)
        xs
        (drop (dec n) (rest xs)))))

(def nth (\ (n xs)
    (if (= n 1)
        (first xs)
        (nth (dec n) (rest xs)))))

(def ^ (\ (base n)
    (if (= n 0)
        1
        (* base (^ base (dec n))))))

(def max (\ (x & xs)
    (let (max^ (\ (a b)
                 (if (> a b) a b)))
      (foldr max^ x xs))))

(def min (\ (x & xs)
    (let (min^ (\ (a b)
                 (if (< a b) a b)))
      (foldr min^ x xs))))

(def concat (\ (& xs)
    (let (concat-list (\ (xs ys)
                    (if (nil? xs) 
                        ys
                        (cons (first xs) (concat-list (rest xs) ys))))
          concat-str (\ (strs)
                    (string (apply concat (map char-list strs)))))
      (cond (nil? xs) nil
            (type-is? (first xs) 'string) (concat-str xs)
            (type-is? (first xs) 'list) (foldr concat-list nil xs)
            otherwise (error (concat "concat: expected string or list, got " (type-of (first xs)) "."))))))

(def apply (\ (f xs)
    (eval (cons f xs))))

(def compose (\ (& fs)
    (\ (x)
      (foldr (\ (f x) (f x)) x fs))))

(def for-each (\ (f xs)
    (if (nil? xs)
        nil
        (do (f (first xs))
          (for-each f (rest xs))))))

(def reverse (\ (xs)
    (if (nil? xs)
        nil
        (concat (reverse (rest xs))
                (list (first xs))))))

(def next (\ (xs)
    (first (rest xs))))

(def drop-until (\ (f xs)
    (cond (nil? xs) nil
          (f (first xs)) xs
          otherwise (drop-until f (rest xs)))))

(def -> (\ (x & fs)
    (foldl (\ (f x) (f x)) x fs)))

(def type-is? (\ (expr t) (= (type-of expr) t)))
