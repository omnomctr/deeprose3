; factorial
(def fact (\ (n)
    (if (= n 0)
        1
        (* n (fact (dec n))))))

(print "6!: ")
(println (fact 6)) ;=> 720

; fibonacci sequence
(def fib (\ (n)
    (let (fib^
           (\ (prev current n)
            (if (= n 0)
              (list)
              (cons current 
                    (fib^ current (+ prev current) (dec n))))))
      (fib^ 0 1 n))))


(print "the first 10 elements of the fibonacci sequence: ")
(println (fib 10)) ;=> (1 1 2 3 5 8 13 21 34 55)
; maps and filters
(print "even numbers from 0 to 10: ")
(println (filter even? (range 0 10))) ;=> (0 2 4 6 8 10)
(print "(1 2 3) mapped with inc (+1): ")
(println (map inc '(1 2 3))) ;=> (2 3 4)

(print "sum of 1 to 10: ")
(println (sum (range 1 10))) ;=> 55

(def quicksort (\ (xs)
    (if (nil? xs) 
        (list)
        (let (x (first xs)
              xs (rest xs))
          (concat (quicksort (filter (\ (n) (< n x)) xs))
                  (list x)
                  (quicksort (filter (\ (n) (>= n x)) xs)))))))
        
(print "quicksort (5 6 3 2 3 4 6 7): ")
(println (quicksort '(5 6 3 2 3 4 6 7))) ;=> (2 3 3 4 5 6 6 7)
