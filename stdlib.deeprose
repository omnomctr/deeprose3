; the deeprose standard library
; Automatically ran at deeprose startup, meaning
; any deeprose program may use any of these functions

(def true 1)
(def false '())
(def otherwise true)

(def dec (\ (n) (- n 1)))
(def inc (\ (n) (+ 1 n)))

(def nil? (\ (xs) (= nil xs)))

(def list (\ (& xs) xs))

(def range (\ (start end)
    (cond (= start end) (list start)
     	  (> start end) (error "range: start > end")
	  otherwise     (cons start (range (inc start) end)))))

(def map (\ (f xs)
    (if (= nil xs)
        nil
        (cons (f (first xs))
              (map f (rest xs))))))

(def filter (\ (pred? xs)
    (cond (nil? xs) nil
          (pred? (first xs)) (cons (first xs)
                                   (filter pred? (rest xs)))
          otherwise (filter pred? (rest xs)))))

(def all? (\ (pred? xs)
    (cond (nil? xs) (error "all: empty list")
          (nil? (rest xs)) (pred? (first xs))
          otherwise (and (pred? (first xs))
                         (all? pred? (rest xs))))))

(def foldr (\ (f accum xs)
    (if (nil? xs)
        accum
        (f (first xs) (foldr f accum (rest xs))))))

(def foldl (\ (f accum xs)
    (if (nil? xs)
        accum 
        (foldl f (f (first xs) accum) (rest xs)))))

; TODO: fix bug relating to apply / evaluating lists of lists
; in scheme this would work:
;   (define (zip-with f . xss)
;     ; pretend all? is a proc we wrote
;     (if (not (all? (lambda (xs) (not (null? xs))) xss)) '()
;         (cons (apply f (map car xss))
;         (apply zip-with (cons f (map cdr xss))))))
; due to some bug hidden in evaluation / quotation
; that does not work in deeprose. Instead, we must make a helper
; function that works with the arguments as lists

(def zip-with (\ (f & xss)
    (let (zip-with^ (\ (f xss)
            (if (not (all? (compose not nil?) xss)) nil
              (cons (apply f (map first xss))
                    (zip-with^ f (map rest xss))))))
      (zip-with^ f xss))))

(def zip (\ (& xss)
    (let (zip^ (\ (xss)
            (if (not (all? (compose not nil?) xss)) nil
              (cons (apply list (map first xss))
                    (zip^ (map rest xss))))))
      ; we need to make a helper function to avoid
      ; apply unfortunately
      (zip^ xss))))

(def even? (\ (n) (= (mod n 2) 0)))
(def odd? (\ (n) (not (even? n))))

(def sum (\ (xs) (apply + xs)))
(def product (\ (xs) (apply * xs)))

(def >= (\ (& xs)
    (let (>=^ (\ (a b)
            (or (> a b)
                (= a b))))
      (all? (\ (x) (>=^ (car x) (cadr x))) (zip xs (drop 1 xs))))))

(def <= (\ (& xs)
    (let (<=^ (\ (a b)
            (or (< a b)
                (= a b))))
      (all? (\ (x) (<=^ (car x) (cadr x))) (zip xs (drop 1 xs))))))

(def len (\ (xs)
    (if (nil? xs)
      0
      (+ 1 (len (rest xs))))))

(def elem? (\ (a xs)
    (foldr (\ (x accum) (or accum (= a x))) false xs)))

(def take (\ (n xs)
    (if (= n 0)
        nil
        (cons (first xs) (take (dec n) (rest xs))))))

(def drop (\ (n xs)
    (if (= n 0)
        xs
        (drop (dec n) (rest xs)))))

(def nth (\ (n xs)
    (if (= n 1)
        (first xs)
        (nth (dec n) (rest xs)))))

(def ^ (\ (base n)
    (if (= n 0)
        1
        (* base (^ base (dec n))))))

(def max (\ (x & xs)
    (let (max^ (\ (a b)
                 (if (> a b) a b)))
      (foldr max^ x xs))))

(def min (\ (x & xs)
    (let (min^ (\ (a b)
                 (if (< a b) a b)))
      (foldr min^ x xs))))

(def concat (\ (& xs)
    (let (concat-list (\ (xs ys)
                    (if (nil? xs) 
                        ys
                        (cons (first xs) (concat-list (rest xs) ys))))
          concat-str (\ (strs)
                    (string (apply concat (map char-list strs)))))
      (cond (nil? xs) nil
            (all? (\ (x) (type-is? x 'string)) xs) (concat-str xs)
            (all? (\ (x) (or (type-is? x 'list)
                             (type-is? x 'nil)))
                  xs)
                  (foldr concat-list nil xs)
            otherwise (error (concat "concat: expected only strings or lists, got " (string (type-of (first xs))) "."))))))

(def apply (\ (f xs)
    (eval (cons f xs))))

(def compose (\ (& fs)
    (\ (x)
      (foldr (\ (f x) (f x)) x fs))))

(def for-each (\ (f xs)
    (if (nil? xs)
        nil
        (do (f (first xs))
          (for-each f (rest xs))))))

(def reverse (\ (xs)
    (foldl (\ (e accum) (cons e accum)) nil xs)))

(def next (\ (xs)
    (first (rest xs))))

(def drop-until (\ (f xs)
    (cond (nil? xs) nil
          (f (first xs)) xs
          otherwise (drop-until f (rest xs)))))

(def -> (\ (x & fs)
    (foldl (\ (f x) (f x)) x fs)))

(def type-is? (\ (expr t) (= (type-of expr) t)))

(def car first)
(def cdr rest)

(def cadr (compose car cdr))
(def cdar (compose cdr car))
(def caar (compose car car))
(def cddr (compose cdr cdr))

(def caaar (compose car car car))
(def caadr (compose car car cdr))
(def cadar (compose car cdr car))
(def caddr (compose car cdr cdr))
(def cdaar (compose cdr car car))
(def cdadr (compose cdr car cdr))
(def cddar (compose cdr cdr car))
(def cdddr (compose cdr cdr cdr))

(def const (\ (val)
    (\ (& dummy) val)))

